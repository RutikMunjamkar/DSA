//this is the bucket sort question and can be done using heaps also
Time complexity O(N) and space compexity O(N)
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer>hash=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int x=hash.getOrDefault(nums[i],0)+1;
            hash.put(nums[i],x);
        }
        List<Integer>[]arr=new ArrayList[nums.length+1];
        for(int i=0;i<arr.length;i++){
            arr[i]=new ArrayList<>();
        }
        for(Map.Entry<Integer,Integer>e:hash.entrySet()){
            int key=e.getKey();//keys means elamenet
            int value=e.getValue();//count of the key
            List<Integer>list=arr[value];
            list.add(key);
            arr[value]=list;
        }
        int []a=new int[k]; int x=0; 
        for(int i=nums.length;i>=0;i--){
            if(arr[i].size()!=0){
                for(int j=0;j<arr[i].size();j++){
                    a[x]=arr[i].get(j);
                    x++; 
                }
            }
            if(x==k){
                break;
            }
        }
        return a;
    }
}
