/*
This is the Top Down Approach where i have used the memoization. The Logic is take a DP array of size n+1 where 0 to n-1 are the steps 
and the nth step is a starting postion similar to -1 if we use bottom up appraoch. if we effectivey store the number of ways a each step
can take then we can use it later. 
*/
class Solution {
    public int climbStairs(int n) {
        int[]dp=new int[n+1];
        return find(dp,n);
    }
    public static int find(int[]dp, int n){
        if(n==0 || n==1){
            dp[n]=1;
        }
        if(n<0){
            return 0;
        }
        if(dp[n]!=0){
            return dp[n];
        }
        int x=find(dp,n-1);
        if(n-1>=0 && dp[n-1]==0){
            dp[n-1]=x;
        }
        int y=find(dp,n-2);
        if(n-2>=0 && dp[n-2]==0){
            dp[n-2]=y;
        }
        return dp[n-1]+dp[n-2];
    }
}
