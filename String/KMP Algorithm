//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            String s, patt;
            s = sc.next();
            patt = sc.next();
            
            Solution ob = new Solution();
            
            ArrayList<Integer> res = ob.search(patt, s);
            if(res.size()==0)
                System.out.print(-1);
            else {
                for(int i = 0;i<res.size();i++)
                    System.out.print(res.get(i) + " ");
            }
            System.out.println();    
        }
    }
}
// } Driver Code Ends

//User function Template for Java

class Solution{
    ArrayList<Integer> search(String pat, String text){
        int n=text.length(); int m=pat.length();
        ArrayList<Integer>list=new ArrayList<>();
        int[]lps=new int[m];
        int i=1; int len=0;
        while(i<m){
            char ch1=pat.charAt(i);
            char ch2=pat.charAt(len);
            if(ch1==ch2){
                len++;
                lps[i]=len;
                i++;
            }
            else{
                if(len==0){
                    lps[i]=len;
                    i++;
                }
                else{
                    // len is the current length of the longest proper prefix which is also
                    // a suffix of the pattern seen so far. lps[len - 1] gives the length of 
                    // the longest proper prefix which is also a suffix of the pattern 
                    // seen up to the position (len - 1).
                    // So, len = lps[len - 1]; updates the value of len to the length of the 
                    // longest proper prefix which is also a suffix of the pattern, up to the 
                    // position just before the current mismatch.
                    len=lps[len-1];
                }
            }
        }
        i=0; int j=0;
        while(i<n && j<m){
            char ch1=text.charAt(i);
            char ch2=pat.charAt(j);
            if(ch1==ch2){
                i++;j++;
            }
            else{
                if(j==0){
                    i++;
                }
                else{
                    j=lps[j-1];
                }
            }
            if(j==m){
                list.add(i-m+1);
                j=lps[j-1];
            }
        }
        return list;
    }
}
