The ArrayList in Java is backed by an array. This helps to understand the internal logic of its implementation. A more comprehensive guide for the ArrayList is available in this article.

So let’s focus first on the time complexity of the common operations at a high level:

1. add() – takes O(1) time; however, worst-case scenario, when a new array has to be created and all the elements copied to it, it’s O(n)
2. add(index, element) – on average runs in O(n) time
3. get() – is always a constant time O(1) operation
4. contains() – implementation is based on indexOf(), so it’ll also run in O(n) time.
5. remove() – runs in linear O(n) time. We have to iterate the entire array to find the element qualifying for removal.
6. indexOf() – also runs in linear time. It iterates through the internal array and checks each element one by one, so the time complexity for this operation always requires O(n) time.
