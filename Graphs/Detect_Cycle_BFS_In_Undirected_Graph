class Solution {
    public boolean isCycle(int V, int[][] arr) {
        HashMap<Integer,List<Integer>>hash=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            int x1=arr[i][0];
            int x2=arr[i][1];
            List<Integer>list1=hash.getOrDefault(x1,new ArrayList<>());
            list1.add(x2);
            hash.put(x1,list1);
            List<Integer>list2=hash.getOrDefault(x2,new ArrayList<>());
            list2.add(x1);
            hash.put(x2,list2);
        }
        int[]vis=new int[V];
        Queue<Integer>que=new LinkedList<>();
        //might not be connected
        //we are adding two nodes in que is becuase we also need to know the 
        //node where it coming from
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                vis[i]=1;
                que.add(i);que.add(-1);
                boolean b=find(vis,que,hash);
                if(b==true){
                    return true;
                }
            }
        }
        return false;
    }
    public static boolean find(int[]vis, Queue<Integer>que, HashMap<Integer,List<Integer>>hash){
        while(!que.isEmpty()){
            int src=que.remove();
            int from=que.remove();
            for(int j=0;j<hash.getOrDefault(src,new ArrayList<>()).size();j++){
                int dest=hash.get(src).get(j);
                if(vis[dest]==0 && dest!=from){
                    que.add(dest);
                    que.add(src);
                    vis[dest]=1;
                }
                else if(vis[dest]==1 && dest!=from){ 
                    return true;
                }
            }
        }
        return false;
    }
}
