import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FloydWarshallAlgorithm {
    static class Edge{
        int src; int dest;
        public Edge(int source, int destination ){
            this.src=source;
            this.dest=destination;
        }
    }
    public static void createGraph(ArrayList<Edge>[]graph){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0,1));
        graph[0].add(new Edge(0,2));

        graph[1].add(new Edge(1,4));
        graph[1].add(new Edge(1,0));

        graph[2].add(new Edge(2,0));
        graph[2].add(new Edge(2,3));

        graph[3].add(new Edge(3,2));
        graph[3].add(new Edge(3,4));
        graph[3].add(new Edge(3,5));

        graph[4].add(new Edge(4,1));
        graph[4].add(new Edge(4,3));
        graph[4].add(new Edge(4,5));

        graph[5].add(new Edge(5,4));
        graph[5].add(new Edge(5,3));
        graph[2].add(new Edge(5,6));

        graph[6].add(new Edge(6,5));
    }
    public static void main(String[] args) {
         /*
                  1--------------4\
                /                 |  5------6
                0                 |  /
                  \               |/
                   2-------------3
         */
        int V=7;
        ArrayList<Edge>[]graph=new ArrayList[V];
        createGraph(graph);
        //To Find the shorted Paths between each source and destination using the Floyd Warshall Algorithm
        //The Shortest distance is calculated using the wights of the edges but here i have considered each edge has 1 weight and based on that shortest path is calculated using the dynamic programming/precomputed concept
        int[][]res=Floyd(graph);
        //Time Complexity:O(V^3);
        //Space Complexity:O(V^2);
        for(int i=0;i<graph.length;i++){
            System.out.println(Arrays.toString(res[i]));
        }
    }
    public static int[][] Floyd(ArrayList<Edge>[]graph){
        //it is undirected Graph
        int n=graph.length;
        int[][]res=new int[n][n];
        int max=n+2;
        for(int i=0;i<n;i++){
            Arrays.fill(res[i],max);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].size();j++){
                int src=graph[i].get(j).src; int dest=graph[i].get(j).dest;
                res[src][dest]=1;
            }
            res[i][i]=0;
        }
        for(int via=0;via<n;via++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    int m=res[i][via]+res[via][j];
                    res[i][j]=(int)(Math.min(res[i][j],m));
                }
            }
        }
        return res;
    }
}
