class Solution{
    static class Pair implements Comparable<Pair>{
        int node;int dist;
        public Pair(int node, int dist){
            this.node=node;
            this.dist=dist;
        }
        public int compareTo(Pair p){
            return this.dist-p.dist;
        }
    }
    static int[] dijkstra(int v, ArrayList<ArrayList<ArrayList<Integer>>> adj, int s){
        int[]res=new int[v];
        Arrays.fill(res, 1000000);
        PriorityQueue<Pair>pq=new PriorityQueue<>();
        pq.add(new Pair(s,0)); res[s]=0;
        while(!pq.isEmpty()){
            Pair p=pq.remove();
            int u=p.node;
            for(int i=0;i<adj.get(u).size();i++){
                int dest=adj.get(u).get(i).get(0); int dist=adj.get(u).get(i).get(1);
                if(res[u]+dist<res[dest]){
                    res[dest]=res[u]+dist;
                    pq.add(new Pair(dest,res[dest]));
                }
            }
        }
        // System.out.println(Arrays.toString(res));
        return res;
    }
}
